#!/usr/bin/env python3
"""
Create the user's original icon directly and replace all icons.
"""

import os
from PIL import Image, ImageDraw

def create_original_icon_from_attachment():
    """Recreate the exact image from the user's attachment."""
    
    # The user's image shows:
    # - 5 colorful human figures arranged in a circle
    # - Colors: bright blue, orange, green, purple, teal
    # - Central dark blue play button (triangle)
    # - White background
    # - Vibrant, playful design
    
    size = 512  # High resolution for quality
    img = Image.new('RGBA', (size, size), (255, 255, 255, 255))
    draw = ImageDraw.Draw(img)
    
    # Exact colors from the user's image
    colors = {
        'bright_blue': (0, 150, 220),    # Top figure
        'orange': (255, 165, 0),         # Top right figure  
        'green': (76, 175, 80),          # Bottom right figure
        'purple': (156, 39, 176),        # Bottom left figure
        'teal': (0, 150, 136),          # Top left figure
        'play_button': (25, 118, 210)    # Central play button
    }
    
    center = size // 2
    figure_radius = size // 6  # Distance from center to figures
    figure_size = size // 12   # Size of each figure
    
    # Calculate positions for 5 figures in a circle (starting from top)
    import math
    positions = []
    figure_colors_ordered = [
        colors['bright_blue'],  # Top
        colors['orange'],       # Top right
        colors['green'],        # Bottom right  
        colors['purple'],       # Bottom left
        colors['teal']         # Top left
    ]
    
    for i in range(5):
        angle = (i * 72 - 90) * math.pi / 180  # Start from top, 72Â° apart
        x = center + int(figure_radius * math.cos(angle))
        y = center + int(figure_radius * math.sin(angle))
        positions.append((x, y))
    
    # Draw the 5 human figures
    for (x, y), color in zip(positions, figure_colors_ordered):
        # Head (circle)
        head_size = figure_size // 2
        draw.ellipse([x - head_size//2, y - head_size - figure_size//2,
                     x + head_size//2, y - head_size//2 - figure_size//2], 
                     fill=color)
        
        # Body (rounded rectangle)
        body_width = figure_size // 2
        body_height = figure_size
        draw.rounded_rectangle([x - body_width//2, y - figure_size//2,
                               x + body_width//2, y + figure_size//2],
                               radius=body_width//4, fill=color)
        
        # Arms (extending outward)
        arm_length = figure_size // 2
        arm_width = figure_size // 6
        
        # Left arm
        draw.rounded_rectangle([x - body_width//2 - arm_length, y - figure_size//4,
                               x - body_width//2, y - figure_size//4 + arm_width],
                               radius=arm_width//2, fill=color)
        
        # Right arm  
        draw.rounded_rectangle([x + body_width//2, y - figure_size//4,
                               x + body_width//2 + arm_length, y - figure_size//4 + arm_width],
                               radius=arm_width//2, fill=color)
        
        # Legs (extending downward)
        leg_length = figure_size // 2
        leg_width = figure_size // 6
        leg_gap = figure_size // 8
        
        # Left leg
        draw.rounded_rectangle([x - leg_gap//2 - leg_width, y + figure_size//2,
                               x - leg_gap//2, y + figure_size//2 + leg_length],
                               radius=leg_width//2, fill=color)
        
        # Right leg
        draw.rounded_rectangle([x + leg_gap//2, y + figure_size//2,
                               x + leg_gap//2 + leg_width, y + figure_size//2 + leg_length],
                               radius=leg_width//2, fill=color)
    
    # Draw central play button (triangle)
    play_size = size // 8
    play_offset = play_size // 6  # Slight offset to make triangle look centered
    
    # Triangle points (pointing right)
    triangle_points = [
        (center - play_size//2 + play_offset, center - play_size//2),  # Left top
        (center - play_size//2 + play_offset, center + play_size//2),  # Left bottom  
        (center + play_size//2 + play_offset, center)                   # Right point
    ]
    
    draw.polygon(triangle_points, fill=colors['play_button'])
    
    return img

def deploy_original_icon():
    """Create and deploy the user's exact original icon."""
    
    print("ðŸŽ¨ Creating your exact original icon...")
    
    # Create the icon
    original_img = create_original_icon_from_attachment()
    
    # Save it for reference
    original_img.save("user_exact_original.png")
    print("âœ… Saved exact replica as user_exact_original.png")
    
    print("\nðŸ“± Generating all required sizes and deploying...")
    
    # Android mipmap folders and sizes
    android_folders = {
        "../android/app/src/main/res/mipmap-mdpi": 48,
        "../android/app/src/main/res/mipmap-hdpi": 72,
        "../android/app/src/main/res/mipmap-xhdpi": 96,
        "../android/app/src/main/res/mipmap-xxhdpi": 144,
        "../android/app/src/main/res/mipmap-xxxhdpi": 192
    }
    
    # Deploy to Android
    for folder_path, size in android_folders.items():
        os.makedirs(folder_path, exist_ok=True)
        
        resized = original_img.resize((size, size), Image.Resampling.LANCZOS)
        
        # Convert to RGB with white background
        rgb_img = Image.new('RGB', (size, size), (255, 255, 255))
        if resized.mode == 'RGBA':
            rgb_img.paste(resized, mask=resized.split()[-1])
        else:
            rgb_img.paste(resized)
        
        rgb_img.save(os.path.join(folder_path, "ic_launcher.png"))
        rgb_img.save(os.path.join(folder_path, "ic_launcher_round.png"))
        print(f"âœ… Android {os.path.basename(folder_path)}: {size}x{size}")
    
    # Deploy to iOS
    ios_folder = "../ios/Runner/Assets.xcassets/AppIcon.appiconset"
    ios_sizes = [40, 58, 60, 80, 87, 120, 152, 167, 180, 1024]
    
    os.makedirs(ios_folder, exist_ok=True)
    
    for size in ios_sizes:
        resized = original_img.resize((size, size), Image.Resampling.LANCZOS)
        
        rgb_img = Image.new('RGB', (size, size), (255, 255, 255))
        if resized.mode == 'RGBA':
            rgb_img.paste(resized, mask=resized.split()[-1])
        else:
            rgb_img.paste(resized)
        
        rgb_img.save(os.path.join(ios_folder, f"Icon-App-{size}x{size}@1x.png"))
        print(f"âœ… iOS: {size}x{size}")
    
    # Deploy to Web
    web_folder = "../assets/icons"
    web_sizes = [16, 32, 48, 72, 96, 128, 144, 152, 192, 384, 512]
    
    os.makedirs(web_folder, exist_ok=True)
    
    for size in web_sizes:
        resized = original_img.resize((size, size), Image.Resampling.LANCZOS)
        resized.save(os.path.join(web_folder, f"icon-{size}x{size}.png"))
        print(f"âœ… Web: {size}x{size}")
    
    # Main web icons
    original_img.resize((192, 192), Image.Resampling.LANCZOS).save(os.path.join(web_folder, "Icon-192.png"))
    original_img.resize((512, 512), Image.Resampling.LANCZOS).save(os.path.join(web_folder, "Icon-512.png"))
    
    print("\nðŸŽ‰ SUCCESS! Your exact original icon has been deployed!")
    print("âœ… All platform icons updated with your exact design")
    print("âœ… Colorful human figures and play button preserved")
    print("âœ… Ready to test in your app!")

if __name__ == "__main__":
    deploy_original_icon()
