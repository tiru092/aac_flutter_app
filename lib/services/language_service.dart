import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'dart:convert';

class LanguageService {
  static const String _currentLanguageKey = 'current_language';
  static const String _supportedLanguagesKey = 'supported_languages';
  static const String _ttsVoiceKey = 'tts_voice_settings';
  static const String _translationsKey = 'custom_translations';

  static final LanguageService _instance = LanguageService._internal();
  factory LanguageService() => _instance;
  LanguageService._internal();
  
  static LanguageService get instance => _instance;

  String _currentLanguage = 'en-IN';
  Map<String, SupportedLanguage> _supportedLanguages = {};
  TTSVoiceSettings? _ttsVoiceSettings;
  Map<String, Map<String, String>> _translations = {};
  FlutterTts? _flutterTts;

  String get currentLanguage => _currentLanguage;
  Map<String, SupportedLanguage> get supportedLanguages => _supportedLanguages;
  TTSVoiceSettings? get ttsVoiceSettings => _ttsVoiceSettings;

  Future<void> initialize() async {
    await _loadCurrentLanguage();
    await _loadSupportedLanguages();
    await _loadTTSVoiceSettings();
    await _loadTranslations();
    await _initializeTTS();
    
    // If no supported languages, initialize with defaults
    if (_supportedLanguages.isEmpty) {
      await _initializeDefaultLanguages();
    }
  }

  Future<void> _initializeTTS() async {
    _flutterTts = FlutterTts();
    
    // Set current language if TTS settings exist
    if (_ttsVoiceSettings != null) {
      await _flutterTts!.setLanguage(_ttsVoiceSettings!.languageCode);
      await _flutterTts!.setPitch(_ttsVoiceSettings!.pitch);
      await _flutterTts!.setSpeechRate(_ttsVoiceSettings!.speechRate);
      
      if (_ttsVoiceSettings!.voiceId.isNotEmpty) {
        // Try to set specific voice if supported
        try {
          final voices = await _flutterTts!.getVoices;
          final voice = voices?.firstWhere(
            (v) {
              try {
                if (v is! Map) return false;
                final voiceMap = Map<String, dynamic>.from(v as Map);
                return voiceMap['name']?.toString() == _ttsVoiceSettings!.voiceId;
              } catch (e) {
                return false;
              }
            },
            orElse: () => null,
          );
          if (voice != null) {
            // Convert to Map<String, String> as expected by setVoice
            final voiceData = Map<String, String>.from(
              Map<String, dynamic>.from(voice as Map).map(
                (key, value) => MapEntry(key.toString(), value?.toString() ?? ''),
              ),
            );
            await _flutterTts!.setVoice(voiceData);
          }
        } catch (e) {
          print('[TTS] Error setting voice during initialization: $e');
        }
      }
    }
  }

  Future<void> _initializeDefaultLanguages() async {

    _supportedLanguages = {

      'en-US': SupportedLanguage(

        code: 'en-US',

        name: 'English (US)',

        nativeName: 'English (US)',

        flag: 'üá∫üá∏',

        isRTL: false,

      ),

      'en-IN': SupportedLanguage(

        code: 'en-IN',

        name: 'English (India)',

        nativeName: 'English (India)',

        flag: 'üáÆüá≥',

        isRTL: false,

      ),

      // Indian Local Languages

      'hi-IN': SupportedLanguage(

        code: 'hi-IN',

        name: 'Hindi',

        nativeName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',

        flag: 'üáÆüá≥',

        isRTL: false,

      ),

      'kn-IN': SupportedLanguage(

        code: 'kn-IN',

        name: 'Kannada',

        nativeName: '‡≤ï‡≤®‡≥ç‡≤®‡≤°',

        flag: 'üáÆüá≥',

        isRTL: false,

      ),

      'ta-IN': SupportedLanguage(

        code: 'ta-IN',

        name: 'Tamil',

        nativeName: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç',

        flag: 'üáÆüá≥',

        isRTL: false,

      ),

      'te-IN': SupportedLanguage(

        code: 'te-IN',

        name: 'Telugu',

        nativeName: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å',

        flag: 'üáÆüá≥',

        isRTL: false,

      ),

      'mr-IN': SupportedLanguage(

        code: 'mr-IN',

        name: 'Marathi',

        nativeName: '‡§Æ‡§∞‡§æ‡§†‡•Ä',

        flag: 'üáÆüá≥',

        isRTL: false,

      ),

      'gu-IN': SupportedLanguage(

        code: 'gu-IN',

        name: 'Gujarati',

        nativeName: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä',

        flag: 'üáÆüá≥',

        isRTL: false,

      ),

      // International Languages  

      'es-ES': SupportedLanguage(

        code: 'es-ES',

        name: 'Spanish',

        nativeName: 'Espa√±ol',

        flag: 'üá™üá∏',

        isRTL: false,

      ),

      'fr-FR': SupportedLanguage(

        code: 'fr-FR',

        name: 'French',

        nativeName: 'Fran√ßais',

        flag: 'üá´üá∑',

        isRTL: false,

      ),

      'de-DE': SupportedLanguage(

        code: 'de-DE',

        name: 'German',

        nativeName: 'Deutsch',

        flag: 'üá©üá™',

        isRTL: false,

      ),

      'zh-CN': SupportedLanguage(

        code: 'zh-CN',

        name: 'Chinese (Simplified)',

        nativeName: '‰∏≠Êñá (ÁÆÄ‰Ωì)',

        flag: 'üá®üá≥',

        isRTL: false,

      ),

      'ar-SA': SupportedLanguage(

        code: 'ar-SA',

        name: 'Arabic',

        nativeName: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',

        flag: 'üá∏üá¶',

        isRTL: true,

      ),

    };
    
    await _saveSupportedLanguages();
    
    // Initialize default translations
    await _initializeDefaultTranslations();
  }

  Future<void> _initializeDefaultTranslations() async {

    _translations = {

      'en-US': {

        'app_title': 'AAC Communication',

        'hello': 'Hello',

        'categories': 'Categories',

        'all_symbols': 'All Symbols',

        'settings': 'Settings',

        'history': 'History',

        'profile': 'Profile',

        'add_symbol': 'Add Symbol',

        'edit_symbol': 'Edit Symbol',

        'delete_symbol': 'Delete Symbol',

        'speak': 'Speak',

        'clear': 'Clear',

        'undo': 'Undo',

        'quick_phrases': 'Quick Phrases',

        'phrase_history': 'Phrase History',

        'recent': 'Recent',

        'favorites': 'Favorites',

        'language_settings': 'Language Settings',

        'voice_settings': 'Voice Settings',

        'select_language': 'Select Language',

        'select_voice': 'Select Voice',

        'speech_rate': 'Speech Rate',

        'pitch': 'Pitch',

        'test_voice': 'Test Voice',

        'all': 'All',

        'menu': 'Menu',

        'say_hello_friend': 'Say "hello" to a friend',

        'ask_for_drink': 'Ask for a drink',

        'express_emotion': 'Express an emotion',

        'practice_name': 'Practice saying my name',

        'access_app_features': 'Access app features and settings',

        'configure_aac_settings': 'Configure your AAC app settings',

        'error': 'Error',

        'ok': 'OK',

        'please': 'Please',

        'thank_you': 'Thank You',

        'help_me': 'Help Me',

        'stop': 'Stop',

        'more': 'More',

        'more_please': 'More please',

        'help_me_please': 'Help me please',

      },

      'en-IN': {

        'app_title': 'AAC Communication',

        'hello': 'Hello',

        'categories': 'Categories',

        'all_symbols': 'All Symbols',

        'settings': 'Settings',

        'history': 'History',

        'profile': 'Profile',

        'add_symbol': 'Add Symbol',

        'edit_symbol': 'Edit Symbol',

        'delete_symbol': 'Delete Symbol',

        'speak': 'Speak',

        'clear': 'Clear',

        'undo': 'Undo',

        'quick_phrases': 'Quick Phrases',

        'phrase_history': 'Phrase History',

        'recent': 'Recent',

        'favorites': 'Favourites',

        'language_settings': 'Language Settings',

        'voice_settings': 'Voice Settings',

        'select_language': 'Select Language',

        'select_voice': 'Select Voice',

        'speech_rate': 'Speech Rate',

        'pitch': 'Pitch',

        'test_voice': 'Test Voice',

        'all': 'All',

        'say_hello_friend': 'Say "hello" to a friend',

        'ask_for_drink': 'Ask for a drink',

        'express_emotion': 'Express an emotion',

        'practice_name': 'Practice saying my name',

        'access_app_features': 'Access app features and settings',

        'configure_aac_settings': 'Configure your AAC app settings',

        'error': 'Error',

        'ok': 'OK',

      },

      // Hindi translations

      'hi-IN': {

        'app_title': '‡§è‡§è‡§∏‡•Ä ‡§∏‡§Ç‡§µ‡§æ‡§¶',

        'hello': '‡§®‡§Æ‡§∏‡•ç‡§§‡•á',

        'categories': '‡§∂‡•ç‡§∞‡•á‡§£‡§ø‡§Ø‡§æ‡§Ç',

        'all_symbols': '‡§∏‡§≠‡•Ä ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï',

        'settings': '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',

        'history': '‡§á‡§§‡§ø‡§π‡§æ‡§∏',

        'profile': '‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤',

        'add_symbol': '‡§™‡•ç‡§∞‡§§‡•Ä‡§ï ‡§ú‡•ã‡§°‡§º‡•á‡§Ç',

        'edit_symbol': '‡§™‡•ç‡§∞‡§§‡•Ä‡§ï ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç',

        'delete_symbol': '‡§™‡•ç‡§∞‡§§‡•Ä‡§ï ‡§π‡§ü‡§æ‡§è‡§Ç',

        'speak': '‡§¨‡•ã‡§≤‡§®‡§æ',

        'clear': '‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç',

        'undo': '‡§™‡•Ç‡§∞‡•ç‡§µ‡§µ‡§§ ‡§ï‡§∞‡•á‡§Ç',

        'quick_phrases': '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§µ‡§æ‡§ï‡•ç‡§Ø',

        'phrase_history': '‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§á‡§§‡§ø‡§π‡§æ‡§∏',

        'recent': '‡§π‡§æ‡§≤ ‡§π‡•Ä ‡§Æ‡•á‡§Ç',

        'favorites': '‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ',

        'language_settings': '‡§≠‡§æ‡§∑‡§æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',

        'voice_settings': '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',

        'select_language': '‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç',

        'select_voice': '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ö‡•Å‡§®‡•á‡§Ç',

        'speech_rate': '‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•Ä ‡§ó‡§§‡§ø',

        'pitch': '‡§∏‡•ç‡§µ‡§∞',

        'test_voice': '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§™‡§∞‡§ñ‡•á‡§Ç',

        'all': '‡§∏‡§≠‡•Ä',

        'say_hello_friend': '‡§ï‡§ø‡§∏‡•Ä ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§ï‡•ã "‡§®‡§Æ‡§∏‡•ç‡§§‡•á" ‡§ï‡§π‡•á‡§Ç',

        'ask_for_drink': '‡§™‡•Ä‡§®‡•á ‡§ï‡•Ä ‡§ö‡•Ä‡§ú‡§º ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§Ç',

        'express_emotion': '‡§≠‡§æ‡§µ‡§®‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç',

        'practice_name': '‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§ï‡§π‡§®‡•á ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç',

        'access_app_features': '‡§ê‡§™ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö‡•á‡§Ç',

        'configure_aac_settings': '‡§Ö‡§™‡§®‡•Ä AAC ‡§ê‡§™ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡§∞‡•á‡§Ç',

        'error': '‡§§‡•ç‡§∞‡•Å‡§ü‡§ø',

        'ok': '‡§†‡•Ä‡§ï ‡§π‡•à',

      },

      // Kannada translations

      'kn-IN': {

        'app_title': '‡≤é‡≤é‡≤∏‡≤ø ‡≤∏‡≤Ç‡≤µ‡≤π‡≤®',

        'hello': '‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞',

        'categories': '‡≤µ‡≤∞‡≥ç‡≤ó‡≤ó‡≤≥‡≥Å',

        'all_symbols': '‡≤é‡≤≤‡≥ç‡≤≤‡≤æ ‡≤ö‡≤ø‡≤π‡≥ç‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å',

        'settings': '‡≤∏‡≥Ü‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤ó‡≤≥‡≥Å',

        'history': '‡≤á‡≤§‡≤ø‡≤π‡≤æ‡≤∏',

        'profile': '‡≤™‡≥ç‡≤∞‡≥ä‡≤´‡≥à‡≤≤‡≥ç',

        'add_symbol': '‡≤ö‡≤ø‡≤π‡≥ç‡≤®‡≥Ü ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø',

        'edit_symbol': '‡≤ö‡≤ø‡≤π‡≥ç‡≤®‡≥Ü ‡≤∏‡≤Ç‡≤™‡≤æ‡≤¶‡≤ø‡≤∏‡≤ø',

        'delete_symbol': '‡≤ö‡≤ø‡≤π‡≥ç‡≤®‡≥Ü ‡≤Ö‡≤≥‡≤ø‡≤∏‡≤ø',

        'speak': '‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≥Å',

        'clear': '‡≤§‡≥Ü‡≤∞‡≤µ‡≥Å‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å',

        'undo': '‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å',

        'quick_phrases': '‡≤§‡≥ç‡≤µ‡≤∞‡≤ø‡≤§ ‡≤µ‡≤æ‡≤ï‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å',

        'phrase_history': '‡≤µ‡≤æ‡≤ï‡≥ç‡≤Ø ‡≤á‡≤§‡≤ø‡≤π‡≤æ‡≤∏',

        'recent': '‡≤á‡≤§‡≥ç‡≤§‡≥Ä‡≤ö‡≤ø‡≤®',

        'favorites': '‡≤Æ‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ø‡≤®‡≤µ‡≥Å‡≤ó‡≤≥‡≥Å',

        'language_settings': '‡≤≠‡≤æ‡≤∑‡≤æ ‡≤∏‡≥Ü‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤ó‡≤≥‡≥Å',

        'voice_settings': '‡≤ß‡≥ç‡≤µ‡≤®‡≤ø ‡≤∏‡≥Ü‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤ó‡≤≥‡≥Å',

        'select_language': '‡≤≠‡≤æ‡≤∑‡≥Ü ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø',

        'select_voice': '‡≤ß‡≥ç‡≤µ‡≤®‡≤ø ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø',

        'speech_rate': '‡≤Æ‡≤æ‡≤§‡≤ø‡≤® ‡≤µ‡≥á‡≤ó',

        'pitch': '‡≤∏‡≥ç‡≤µ‡≤∞',

        'test_voice': '‡≤ß‡≥ç‡≤µ‡≤®‡≤ø ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≥Ü',

        'all': '‡≤é‡≤≤‡≥ç‡≤≤‡≤æ',

        'menu': '‡≤Æ‡≥Ü‡≤®‡≥Å',

        'say_hello_friend': '‡≤∏‡≥ç‡≤®‡≥á‡≤π‡≤ø‡≤§‡≤®‡≤ø‡≤ó‡≥Ü "‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞" ‡≤π‡≥á‡≤≥‡≤ø',

        'ask_for_drink': '‡≤™‡≤æ‡≤®‡≥Ä‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≥á‡≤≥‡≤ø',

        'express_emotion': '‡≤≠‡≤æ‡≤µ‡≤®‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≥ç‡≤Ø‡≤ï‡≥ç‡≤§‡≤™‡≤°‡≤ø‡≤∏‡≤ø',

        'practice_name': '‡≤®‡≤®‡≥ç‡≤® ‡≤π‡≥Ü‡≤∏‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥á‡≤≥‡≥Å‡≤µ ‡≤Ö‡≤≠‡≥ç‡≤Ø‡≤æ‡≤∏ ‡≤Æ‡≤æ‡≤°‡≤ø',

        'access_app_features': '‡≤Ü‡≥ç‡≤Ø‡≤™‡≥ç ‡≤µ‡≥à‡≤∂‡≤ø‡≤∑‡≥ç‡≤ü‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≥Ü‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥ç‡≤∞‡≤µ‡≥á‡≤∂‡≤ø‡≤∏‡≤ø',

        'configure_aac_settings': '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ AAC ‡≤Ü‡≥ç‡≤Ø‡≤™‡≥ç ‡≤∏‡≥Ü‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤æ‡≤®‡≥ç‡≤´‡≤ø‡≤ó‡≤∞‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø',

        'error': '‡≤¶‡≥ã‡≤∑',

        'ok': '‡≤∏‡≤∞‡≤ø',

        'please': '‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å',

        'thank_you': '‡≤ß‡≤®‡≥ç‡≤Ø‡≤µ‡≤æ‡≤¶',

        'help_me': '‡≤®‡≤®‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤ø',

        'stop': '‡≤®‡≤ø‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤ø',

        'more': '‡≤á‡≤®‡≥ç‡≤®‡≤∑‡≥ç‡≤ü‡≥Å',

        'more_please': '‡≤á‡≤®‡≥ç‡≤®‡≤∑‡≥ç‡≤ü‡≥Å ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å',

        'help_me_please': '‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤®‡≤®‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤ø',

      },

      // Tamil translations

      'ta-IN': {

        'app_title': '‡Æè‡Æè‡Æö‡Æø ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ',

        'hello': '‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç',

        'categories': '‡Æ™‡Æø‡Æ∞‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç',

        'all_symbols': '‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ ‡Æï‡ØÅ‡Æ±‡Æø‡ÆØ‡ØÄ‡Æü‡ØÅ‡Æï‡Æ≥‡Øç',

        'settings': '‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç',

        'history': '‡Æµ‡Æ∞‡Æ≤‡Ææ‡Æ±‡ØÅ',

        'profile': '‡Æö‡ØÅ‡ÆØ‡Æµ‡Æø‡Æµ‡Æ∞‡ÆÆ‡Øç',

        'add_symbol': '‡Æï‡ØÅ‡Æ±‡Æø‡ÆØ‡ØÄ‡Æü‡ØÅ ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',

        'edit_symbol': '‡Æï‡ØÅ‡Æ±‡Æø‡ÆØ‡ØÄ‡Æü‡ØÅ ‡Æ§‡Æø‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç',

        'delete_symbol': '‡Æï‡ØÅ‡Æ±‡Æø‡ÆØ‡ØÄ‡Æü‡ØÅ ‡Æ®‡ØÄ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',

        'speak': '‡Æ™‡Øá‡Æö‡ØÅ',

        'clear': '‡ÆÖ‡Æ¥‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',

        'undo': '‡Æö‡ØÜ‡ÆØ‡Æ≤‡Øç‡Æ§‡Æµ‡Æø‡Æ∞‡Øç',

        'quick_phrases': '‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡ØÅ ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æø‡ÆØ‡Æô‡Øç‡Æï‡Æ≥‡Øç',

        'phrase_history': '‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æø‡ÆØ ‡Æµ‡Æ∞‡Æ≤‡Ææ‡Æ±‡ØÅ',

        'recent': '‡Æö‡ÆÆ‡ØÄ‡Æ™‡Æ§‡Øç‡Æ§‡Æø‡ÆØ',

        'favorites': '‡Æ™‡Æø‡Æü‡Æø‡Æ§‡Øç‡Æ§‡Æµ‡Øà',

        'language_settings': '‡ÆÆ‡Øä‡Æ¥‡Æø ‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç',

        'voice_settings': '‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç',

        'select_language': '‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',

        'select_voice': '‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',

        'speech_rate': '‡Æ™‡Øá‡Æö‡Øç‡Æö‡ØÅ ‡Æµ‡Øá‡Æï‡ÆÆ‡Øç',

        'pitch': '‡Æö‡ØÅ‡Æ∞‡ÆÆ‡Øç',

        'test_voice': '‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç ‡Æö‡Øã‡Æ§‡Æ©‡Øà',

        'all': '‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ‡ÆÆ‡Øç',

        'menu': '‡ÆÆ‡ØÜ‡Æ©‡ØÅ',

        'say_hello_friend': '‡Æ®‡Æ£‡Øç‡Æ™‡Æ∞‡Æø‡Æü‡ÆÆ‡Øç "‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç" ‡Æö‡Øä‡Æ≤‡Øç‡Æ≤‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',

        'ask_for_drink': '‡Æ™‡Ææ‡Æ©‡ÆÆ‡Øç ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',

        'express_emotion': '‡Æâ‡Æ£‡Æ∞‡Øç‡Æµ‡Øà ‡Æµ‡ØÜ‡Æ≥‡Æø‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',

        'practice_name': '‡Æé‡Æ©‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øà‡Æö‡Øç ‡Æö‡Øä‡Æ≤‡Øç‡Æ≤‡Æ™‡Øç ‡Æ™‡ÆØ‡Æø‡Æ±‡Øç‡Æö‡Æø ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',

        'access_app_features': '‡ÆÜ‡Æ™‡Øç‡Æ∏‡Øç ‡ÆÖ‡ÆÆ‡Øç‡Æö‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',

        'configure_aac_settings': '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç AAC ‡ÆÜ‡Æ™‡Øç‡Æ∏‡Øç ‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øà ‡Æï‡Æü‡Øç‡Æü‡ÆÆ‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',

        'error': '‡Æ™‡Æø‡Æ¥‡Øà',

        'ok': '‡Æö‡Æ∞‡Æø',

        'please': '‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ',

        'thank_you': '‡Æ®‡Æ©‡Øç‡Æ±‡Æø',

        'help_me': '‡Æé‡Æ©‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',

        'stop': '‡Æ®‡Æø‡Æ±‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ',

        'more': '‡ÆÆ‡Øá‡Æ≤‡ØÅ‡ÆÆ‡Øç',

        'more_please': '‡ÆÆ‡Øá‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ',

        'help_me_please': '‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æé‡Æ©‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',

      },

      // Telugu translations

      'te-IN': {

        'app_title': '‡∞é‡∞é‡∞∏‡∞ø ‡∞ï‡∞Æ‡±ç‡∞Ø‡±Ç‡∞®‡∞ø‡∞ï‡±á‡∞∑‡∞®‡±ç',

        'hello': '‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç',

        'categories': '‡∞µ‡∞∞‡±ç‡∞ó‡∞æ‡∞≤‡±Å',

        'all_symbols': '‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞ö‡∞ø‡∞π‡±ç‡∞®‡∞æ‡∞≤‡±Å',

        'settings': '‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±Å‡∞≤‡±Å',

        'history': '‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞',

        'profile': '‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç',

        'add_symbol': '‡∞ö‡∞ø‡∞π‡±ç‡∞®‡∞Ç ‡∞ú‡±ã‡∞°‡∞ø‡∞Ç‡∞ö‡±Å',

        'edit_symbol': '‡∞ö‡∞ø‡∞π‡±ç‡∞®‡∞Ç ‡∞∏‡∞µ‡∞∞‡∞ø‡∞Ç‡∞ö‡±Å',

        'delete_symbol': '‡∞ö‡∞ø‡∞π‡±ç‡∞®‡∞Ç ‡∞§‡±ä‡∞≤‡∞ó‡∞ø‡∞Ç‡∞ö‡±Å',

        'speak': '‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡±Å',

        'clear': '‡∞ï‡±ç‡∞≤‡∞ø‡∞Ø‡∞∞‡±ç',

        'undo': '‡∞∞‡∞¶‡±ç‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞ø',

        'quick_phrases': '‡∞§‡±ç‡∞µ‡∞∞‡∞ø‡∞§ ‡∞µ‡∞æ‡∞ï‡±ç‡∞Ø‡∞æ‡∞≤‡±Å',

        'phrase_history': '‡∞µ‡∞æ‡∞ï‡±ç‡∞Ø ‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞',

        'recent': '‡∞á‡∞ü‡±Ä‡∞µ‡∞≤‡∞ø',

        'favorites': '‡∞á‡∞∑‡±ç‡∞ü‡∞Æ‡±à‡∞®‡∞µ‡∞ø',

        'language_settings': '‡∞≠‡∞æ‡∞∑ ‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±Å‡∞≤‡±Å',

        'voice_settings': '‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±Å‡∞≤‡±Å',

        'select_language': '‡∞≠‡∞æ‡∞∑ ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø',

        'select_voice': '‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø',

        'speech_rate': '‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡±á ‡∞µ‡±á‡∞ó‡∞Ç',

        'pitch': '‡∞™‡∞ø‡∞ö‡±ç',

        'test_voice': '‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑',

        'all': '‡∞Ö‡∞®‡±ç‡∞®‡±Ä',

        'menu': '‡∞Æ‡±Ü‡∞®‡±Ç',

        'say_hello_friend': '‡∞∏‡±ç‡∞®‡±á‡∞π‡∞ø‡∞§‡±Å‡∞°‡∞ø‡∞ï‡∞ø "‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç" ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞Ç‡∞°‡∞ø',

        'ask_for_drink': '‡∞™‡∞æ‡∞®‡±Ä‡∞Ø‡∞Ç ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø',

        'express_emotion': '‡∞≠‡∞æ‡∞µ‡∞®‡∞®‡±Å ‡∞µ‡±ç‡∞Ø‡∞ï‡±ç‡∞§‡∞™‡∞∞‡∞ö‡∞Ç‡∞°‡∞ø',

        'practice_name': '‡∞®‡∞æ ‡∞™‡±á‡∞∞‡±Å ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞°‡∞Ç ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∏‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø',

        'access_app_features': '‡∞Ø‡∞æ‡∞™‡±ç ‡∞´‡±Ä‡∞ö‡∞∞‡±ç‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‚Äå‡∞≤‡∞®‡±Å ‡∞Ø‡∞æ‡∞ï‡±ç‡∞∏‡±Ü‡∞∏‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',

        'configure_aac_settings': '‡∞Æ‡±Ä AAC ‡∞Ø‡∞æ‡∞™‡±ç ‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‚Äå‡∞≤‡∞®‡±Å ‡∞ï‡∞æ‡∞®‡±ç‡∞´‡∞ø‡∞ó‡∞∞‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',

        'error': '‡∞¶‡±ã‡∞∑‡∞Ç',

        'ok': '‡∞∏‡∞∞‡±á',

        'please': '‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø',

        'thank_you': '‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å',

        'help_me': '‡∞®‡∞æ‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',

        'stop': '‡∞Ü‡∞™‡∞Ç‡∞°‡∞ø',

        'more': '‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§',

        'more_please': '‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø',

        'help_me_please': '‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞®‡∞æ‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',

      },

      // Marathi translations

      'mr-IN': {

        'app_title': '‡§è‡§è‡§∏‡•Ä ‡§∏‡§Ç‡§µ‡§æ‡§¶',

        'hello': '‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞',

        'categories': '‡§∂‡•ç‡§∞‡•á‡§£‡•ç‡§Ø‡§æ',

        'all_symbols': '‡§∏‡§∞‡•ç‡§µ ‡§ö‡§ø‡§®‡•ç‡§π‡•á',

        'settings': '‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',

        'history': '‡§á‡§§‡§ø‡§π‡§æ‡§∏',

        'profile': '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤',

        'add_symbol': '‡§ö‡§ø‡§®‡•ç‡§π ‡§ú‡•ã‡§°‡§æ',

        'edit_symbol': '‡§ö‡§ø‡§®‡•ç‡§π ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡§æ',

        'delete_symbol': '‡§ö‡§ø‡§®‡•ç‡§π ‡§π‡§ü‡§µ‡§æ',

        'speak': '‡§¨‡•ã‡§≤‡§æ',

        'clear': '‡§∏‡§æ‡§´ ‡§ï‡§∞‡§æ',

        'undo': '‡§™‡•Ç‡§∞‡•ç‡§µ‡§µ‡§§ ‡§ï‡§∞‡§æ',

        'quick_phrases': '‡§¶‡•ç‡§∞‡•Å‡§§ ‡§µ‡§æ‡§ï‡•ç‡§Ø‡•á',

        'phrase_history': '‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§á‡§§‡§ø‡§π‡§æ‡§∏',

        'recent': '‡§Ö‡§≤‡§ø‡§ï‡§°‡•Ä‡§≤',

        'favorites': '‡§Ü‡§µ‡§°‡§§‡•á',

        'language_settings': '‡§≠‡§æ‡§∑‡§æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',

        'voice_settings': '‡§Ü‡§µ‡§æ‡§ú ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏',

        'select_language': '‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ',

        'select_voice': '‡§Ü‡§µ‡§æ‡§ú ‡§®‡§ø‡§µ‡§°‡§æ',

        'speech_rate': '‡§¨‡•ã‡§≤‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§µ‡•á‡§ó',

        'pitch': '‡§∏‡•ç‡§µ‡§∞',

        'test_voice': '‡§Ü‡§µ‡§æ‡§ú ‡§ö‡§æ‡§ö‡§£‡•Ä',

        'all': '‡§∏‡§∞‡•ç‡§µ',

        'menu': '‡§Æ‡•á‡§®‡•Ç',

        'say_hello_friend': '‡§Æ‡§ø‡§§‡•ç‡§∞‡§æ‡§≤‡§æ "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞" ‡§Æ‡•ç‡§π‡§£‡§æ',

        'ask_for_drink': '‡§™‡•á‡§Ø ‡§Æ‡§æ‡§ó‡§æ',

        'express_emotion': '‡§≠‡§æ‡§µ‡§®‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§ ‡§ï‡§∞‡§æ',

        'practice_name': '‡§Æ‡§æ‡§ù‡•á ‡§®‡§æ‡§µ ‡§Æ‡•ç‡§π‡§£‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§∏‡§∞‡§æ‡§µ ‡§ï‡§∞‡§æ',

        'access_app_features': '‡§Ö‡•Ö‡§™ ‡§µ‡•à‡§∂‡§ø‡§∑‡•ç‡§ü‡•ç‡§Ø‡•á ‡§Ü‡§£‡§ø ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§Ö‡•Ö‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞‡§æ',

        'configure_aac_settings': '‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ AAC ‡§Ö‡•Ö‡§™ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞ ‡§ï‡§∞‡§æ',

        'error': '‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä',

        'ok': '‡§†‡•Ä‡§ï ‡§Ü‡§π‡•á',

        'please': '‡§ï‡•É‡§™‡§Ø‡§æ',

        'thank_you': '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶',

        'help_me': '‡§Æ‡§≤‡§æ ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡§æ',

        'stop': '‡§•‡§æ‡§Ç‡§¨‡§æ',

        'more': '‡§Ö‡§ß‡§ø‡§ï',

        'more_please': '‡§Ö‡§ß‡§ø‡§ï ‡§ï‡•É‡§™‡§Ø‡§æ',

        'help_me_please': '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡§≤‡§æ ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡§æ',

      },

      // Gujarati translations

      'gu-IN': {

        'app_title': '‡™è‡™è‡™∏‡´Ä ‡™ï‡™Æ‡´ç‡™Ø‡´Å‡™®‡™ø‡™ï‡´á‡™∂‡™®',

        'hello': '‡™®‡™Æ‡™∏‡´ç‡™§‡´á',

        'categories': '‡™∂‡´ç‡™∞‡´á‡™£‡´Ä‡™ì',

        'all_symbols': '‡™¨‡™ß‡™æ ‡™™‡´ç‡™∞‡™§‡´Ä‡™ï‡´ã',

        'settings': '‡™∏‡´á‡™ü‡™ø‡™Ç‡™ó‡´ç‡™∏',

        'history': '‡™á‡™§‡™ø‡™π‡™æ‡™∏',

        'profile': '‡™™‡´ç‡™∞‡´ã‡™´‡™æ‡™á‡™≤',

        'add_symbol': '‡™™‡´ç‡™∞‡™§‡´Ä‡™ï ‡™â‡™Æ‡´á‡™∞‡´ã',

        'edit_symbol': '‡™™‡´ç‡™∞‡™§‡´Ä‡™ï ‡™∏‡™Ç‡™™‡™æ‡™¶‡™ø‡™§ ‡™ï‡™∞‡´ã',

        'delete_symbol': '‡™™‡´ç‡™∞‡™§‡´Ä‡™ï ‡™ï‡™æ‡™¢‡´Ä ‡™®‡™æ‡™ñ‡´ã',

        'speak': '‡™¨‡´ã‡™≤‡´ã',

        'clear': '‡™∏‡™æ‡™´ ‡™ï‡™∞‡´ã',

        'undo': '‡™™‡´Ç‡™∞‡´ç‡™µ‡™µ‡™§‡´ç ‡™ï‡™∞‡´ã',

        'quick_phrases': '‡™ù‡™°‡™™‡´Ä ‡™µ‡™æ‡™ï‡´ç‡™Ø‡´ã',

        'phrase_history': '‡™µ‡™æ‡™ï‡´ç‡™Ø ‡™á‡™§‡™ø‡™π‡™æ‡™∏',

        'recent': '‡™§‡™æ‡™ú‡´á‡™§‡™∞‡™®‡™æ',

        'favorites': '‡™Æ‡™®‡™™‡™∏‡™Ç‡™¶',

        'language_settings': '‡™≠‡™æ‡™∑‡™æ ‡™∏‡´á‡™ü‡™ø‡™Ç‡™ó‡´ç‡™∏',

        'voice_settings': '‡™Ö‡™µ‡™æ‡™ú ‡™∏‡´á‡™ü‡™ø‡™Ç‡™ó‡´ç‡™∏',

        'select_language': '‡™≠‡™æ‡™∑‡™æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã',

        'select_voice': '‡™Ö‡™µ‡™æ‡™ú ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã',

        'speech_rate': '‡™¨‡´ã‡™≤‡™µ‡™æ‡™®‡´Ä ‡™ù‡™°‡™™',

        'pitch': '‡™∏‡´ç‡™µ‡™∞',

        'test_voice': '‡™Ö‡™µ‡™æ‡™ú ‡™ü‡´á‡™∏‡´ç‡™ü',

        'all': '‡™¨‡™ß‡´Å‡™Ç',

        'menu': '‡™Æ‡´á‡™®‡´Ç',

        'say_hello_friend': '‡™Æ‡™ø‡™§‡´ç‡™∞‡™®‡´á "‡™®‡™Æ‡™∏‡´ç‡™§‡´á" ‡™ï‡™π‡´ã',

        'ask_for_drink': '‡™™‡´Ä‡™£‡™æ ‡™Æ‡™æ‡™ü‡´á ‡™™‡´Ç‡™õ‡´ã',

        'express_emotion': '‡™≤‡™æ‡™ó‡™£‡´Ä ‡™µ‡´ç‡™Ø‡™ï‡´ç‡™§ ‡™ï‡™∞‡´ã',

        'practice_name': '‡™Æ‡™æ‡™∞‡´Å‡™Ç ‡™®‡™æ‡™Æ ‡™ï‡™π‡´á‡™µ‡™æ‡™®‡´Ä ‡™™‡´ç‡™∞‡´á‡™ï‡´ç‡™ü‡™ø‡™∏ ‡™ï‡™∞‡´ã',

        'access_app_features': '‡™è‡™™‡´ç‡™≤‡™ø‡™ï‡´á‡™∂‡™® ‡™´‡´Ä‡™ö‡™∞‡´ç‡™∏ ‡™Ö‡™®‡´á ‡™∏‡´á‡™ü‡™ø‡™Ç‡™ó‡´ç‡™∏ ‡™ç‡™ï‡´ç‡™∏‡´á‡™∏ ‡™ï‡™∞‡´ã',

        'configure_aac_settings': '‡™§‡™Æ‡™æ‡™∞‡´Ä AAC ‡™è‡™™‡´ç‡™≤‡™ø‡™ï‡´á‡™∂‡™® ‡™∏‡´á‡™ü‡™ø‡™Ç‡™ó‡´ç‡™∏ ‡™ï‡´ã‡™®‡´ç‡™´‡™ø‡™ó‡™∞ ‡™ï‡™∞‡´ã',

        'error': '‡™≠‡´Ç‡™≤',

        'ok': '‡™†‡´Ä‡™ï ‡™õ‡´á',

        'please': '‡™ï‡´É‡™™‡™æ ‡™ï‡™∞‡´Ä‡™®‡´á',

        'thank_you': '‡™Ü‡™≠‡™æ‡™∞',

        'help_me': '‡™Æ‡™®‡´á ‡™Æ‡™¶‡™¶ ‡™ï‡™∞‡´ã',

        'stop': '‡™Ö‡™ü‡™ï‡™æ‡™µ‡´ã',

        'more': '‡™µ‡™ß‡´Å',

        'more_please': '‡™µ‡™ß‡´Å ‡™ï‡´É‡™™‡™æ ‡™ï‡™∞‡´Ä‡™®‡´á',

        'help_me_please': '‡™ï‡´É‡™™‡™æ ‡™ï‡™∞‡´Ä‡™®‡´á ‡™Æ‡™®‡´á ‡™Æ‡™¶‡™¶ ‡™ï‡™∞‡´ã',

      },

      'es-ES': {

        'app_title': 'Comunicaci√≥n AAC',

        'hello': 'Hola',

        'categories': 'Categor√≠as',

        'all_symbols': 'Todos los S√≠mbolos',

        'settings': 'Configuraci√≥n',

        'history': 'Historial',

        'profile': 'Perfil',

        'add_symbol': 'Agregar S√≠mbolo',

        'edit_symbol': 'Editar S√≠mbolo',

        'delete_symbol': 'Eliminar S√≠mbolo',

        'speak': 'Hablar',

        'clear': 'Limpiar',

        'undo': 'Deshacer',

        'quick_phrases': 'Frases R√°pidas',

        'phrase_history': 'Historial de Frases',

        'recent': 'Reciente',

        'favorites': 'Favoritos',

        'language_settings': 'Configuraci√≥n de Idioma',

        'voice_settings': 'Configuraci√≥n de Voz',

        'select_language': 'Seleccionar Idioma',

        'select_voice': 'Seleccionar Voz',

        'speech_rate': 'Velocidad de Habla',

        'pitch': 'Tono',

        'test_voice': 'Probar Voz',

        'all': 'Todo',

        'menu': 'Men√∫',

        'say_hello_friend': 'Dile "hola" a un amigo',

        'ask_for_drink': 'Pedir una bebida',

        'express_emotion': 'Expresar una emoci√≥n',

        'practice_name': 'Practicar decir mi nombre',

        'access_app_features': 'Acceder a funciones y configuraci√≥n de la aplicaci√≥n',

        'configure_aac_settings': 'Configurar la configuraci√≥n de tu aplicaci√≥n AAC',

        'error': 'Error',

        'ok': 'Aceptar',

        'please': 'Por favor',

        'thank_you': 'Gracias',

        'help_me': 'Ay√∫dame',

        'stop': 'Parar',

        'more': 'M√°s',

        'more_please': 'M√°s por favor',

        'help_me_please': 'Por favor ay√∫dame',

      },

    };
    
    await _saveTranslations();
  }

  Future<void> changeLanguage(String languageCode) async {
    if (_supportedLanguages.containsKey(languageCode)) {
      _currentLanguage = languageCode;
      await _saveCurrentLanguage();
      
      // Update TTS language
      if (_flutterTts != null) {
        await _flutterTts!.setLanguage(languageCode);
        
        // Reset voice settings for new language
        _ttsVoiceSettings = TTSVoiceSettings(
          languageCode: languageCode,
          voiceId: '',
          speechRate: 0.5,
          pitch: 1.0,
        );
        await _saveTTSVoiceSettings();
      }
    }
  }

  Future<List<TTSVoice>> getAvailableVoices() async {

    if (_flutterTts == null) return <TTSVoice>[];

    

    final voices = await _flutterTts!.getVoices;

    if (voices == null) return <TTSVoice>[];

    

    // Get the base language code (e.g., 'hi' from 'hi-IN')

    final baseLanguage = _currentLanguage.split('-')[0];

    

    final ttsVoices = voices
        .where((voice) {
          try {
            // Safely cast to Map<String, dynamic>
            if (voice is! Map) return false;
            final voiceMap = Map<String, dynamic>.from(voice as Map);
            final locale = voiceMap['locale']?.toString() ?? '';
            // Support both exact match and partial match for Indian languages
            return locale.startsWith(baseLanguage) || 
                   locale.contains(_currentLanguage) ||
                   locale.contains('IN') && locale.startsWith(baseLanguage);
          } catch (e) {
            return false;
          }
        })
        .map((voice) {
          try {
            final voiceMap = Map<String, dynamic>.from(voice as Map);
            return TTSVoice(
              id: voiceMap['name']?.toString() ?? '',
              name: voiceMap['name']?.toString() ?? 'Unknown',
              language: voiceMap['locale']?.toString() ?? _currentLanguage,
              gender: _determineGender(voiceMap['name']?.toString() ?? ''),
            );
          } catch (e) {
            return TTSVoice(
              id: 'fallback',
              name: 'Default Voice',
              language: _currentLanguage,
              gender: 'unknown',
            );
          }
        })
        .toList()
        .cast<TTSVoice>();

    

    return ttsVoices.whereType<TTSVoice>().toList();

  }

  String _determineGender(String voiceName) {
    final femaleIndicators = ['female', 'woman', 'girl', 'karen', 'samantha', 'victoria'];
    final maleIndicators = ['male', 'man', 'boy', 'alex', 'daniel', 'fred'];
    
    final lowerName = voiceName.toLowerCase();
    
    if (femaleIndicators.any((indicator) => lowerName.contains(indicator))) {
      return 'female';
    } else if (maleIndicators.any((indicator) => lowerName.contains(indicator))) {
      return 'male';
    }
    
    return 'neutral';
  }

  Future<void> updateTTSVoiceSettings(TTSVoiceSettings settings) async {
    _ttsVoiceSettings = settings;
    await _saveTTSVoiceSettings();
    
    // Apply settings to TTS engine
    if (_flutterTts != null) {
      await _flutterTts!.setLanguage(settings.languageCode);
      await _flutterTts!.setPitch(settings.pitch);
      await _flutterTts!.setSpeechRate(settings.speechRate);
      
      if (settings.voiceId.isNotEmpty) {
        try {
          final voices = await _flutterTts!.getVoices;
          final voice = voices?.firstWhere(
            (v) {
              try {
                if (v is! Map) return false;
                final voiceMap = Map<String, dynamic>.from(v as Map);
                return voiceMap['name']?.toString() == settings.voiceId;
              } catch (e) {
                return false;
              }
            },
            orElse: () => null,
          );
          if (voice != null) {
            // Convert to Map<String, String> as expected by setVoice
            final voiceData = Map<String, String>.from(
              Map<String, dynamic>.from(voice as Map).map(
                (key, value) => MapEntry(key.toString(), value?.toString() ?? ''),
              ),
            );
            await _flutterTts!.setVoice(voiceData);
          }
        } catch (e) {
          print('[TTS] Error setting voice: $e');
        }
      }
    }
  }

  String translate(String key, {String? fallback}) {
    final translation = _translations[_currentLanguage]?[key];
    return translation ?? fallback ?? key;
  }

  Future<void> addCustomTranslation(String languageCode, String key, String translation) async {
    _translations[languageCode] ??= {};
    _translations[languageCode]![key] = translation;
    await _saveTranslations();
  }

  bool isRTL() {
    return _supportedLanguages[_currentLanguage]?.isRTL ?? false;
  }

  String getLanguageFlag() {
    return _supportedLanguages[_currentLanguage]?.flag ?? 'üåê';
  }

  String getLanguageName() {
    return _supportedLanguages[_currentLanguage]?.nativeName ?? 'Unknown';
  }

  Future<void> testVoice(String text) async {
    if (_flutterTts != null) {
      await _flutterTts!.speak(text);
    }
  }

  // Save/Load methods
  Future<void> _loadCurrentLanguage() async {

    final prefs = await SharedPreferences.getInstance();

    _currentLanguage = prefs.getString(_currentLanguageKey) ?? 'en-IN';

  }

  Future<void> _saveCurrentLanguage() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_currentLanguageKey, _currentLanguage);
  }

  Future<void> _loadSupportedLanguages() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final languagesJson = prefs.getString(_supportedLanguagesKey);
      
      if (languagesJson != null) {
        final Map<String, dynamic> languagesMap = jsonDecode(languagesJson);
        _supportedLanguages = languagesMap.map(
          (key, value) => MapEntry(key, SupportedLanguage.fromJson(value)),
        );
      }
    } catch (e) {
      print('Error loading supported languages: $e');
    }
  }

  Future<void> _saveSupportedLanguages() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final languagesMap = _supportedLanguages.map(
        (key, value) => MapEntry(key, value.toJson()),
      );
      final languagesJson = jsonEncode(languagesMap);
      await prefs.setString(_supportedLanguagesKey, languagesJson);
    } catch (e) {
      print('Error saving supported languages: $e');
    }
  }

  Future<void> _loadTTSVoiceSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final settingsJson = prefs.getString(_ttsVoiceKey);
      
      if (settingsJson != null) {
        final Map<String, dynamic> settingsMap = jsonDecode(settingsJson);
        _ttsVoiceSettings = TTSVoiceSettings.fromJson(settingsMap);
      }
    } catch (e) {
      print('Error loading TTS voice settings: $e');
    }
  }

  Future<void> _saveTTSVoiceSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      if (_ttsVoiceSettings != null) {
        final settingsJson = jsonEncode(_ttsVoiceSettings!.toJson());
        await prefs.setString(_ttsVoiceKey, settingsJson);
      }
    } catch (e) {
      print('Error saving TTS voice settings: $e');
    }
  }

  Future<void> _loadTranslations() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final translationsJson = prefs.getString(_translationsKey);
      
      if (translationsJson != null) {
        final Map<String, dynamic> translationsMap = jsonDecode(translationsJson);
        _translations = translationsMap.map(
          (key, value) => MapEntry(key, Map<String, String>.from(value)),
        );
      }
    } catch (e) {
      print('Error loading translations: $e');
    }
  }

  Future<void> _saveTranslations() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final translationsJson = jsonEncode(_translations);
      await prefs.setString(_translationsKey, translationsJson);
    } catch (e) {
      print('Error saving translations: $e');
    }
  }
}

class SupportedLanguage {
  final String code;
  final String name;
  final String nativeName;
  final String flag;
  final bool isRTL;

  SupportedLanguage({
    required this.code,
    required this.name,
    required this.nativeName,
    required this.flag,
    required this.isRTL,
  });

  Map<String, dynamic> toJson() => {
    'code': code,
    'name': name,
    'nativeName': nativeName,
    'flag': flag,
    'isRTL': isRTL,
  };

  factory SupportedLanguage.fromJson(Map<String, dynamic> json) => SupportedLanguage(
    code: json['code'],
    name: json['name'],
    nativeName: json['nativeName'],
    flag: json['flag'],
    isRTL: json['isRTL'],
  );
}

class TTSVoiceSettings {
  final String languageCode;
  final String voiceId;
  final double speechRate;
  final double pitch;

  TTSVoiceSettings({
    required this.languageCode,
    required this.voiceId,
    required this.speechRate,
    required this.pitch,
  });

  Map<String, dynamic> toJson() => {
    'languageCode': languageCode,
    'voiceId': voiceId,
    'speechRate': speechRate,
    'pitch': pitch,
  };

  factory TTSVoiceSettings.fromJson(Map<String, dynamic> json) => TTSVoiceSettings(
    languageCode: json['languageCode'],
    voiceId: json['voiceId'],
    speechRate: json['speechRate']?.toDouble() ?? 0.5,
    pitch: json['pitch']?.toDouble() ?? 1.0,
  );

  TTSVoiceSettings copyWith({
    String? languageCode,
    String? voiceId,
    double? speechRate,
    double? pitch,
  }) => TTSVoiceSettings(
    languageCode: languageCode ?? this.languageCode,
    voiceId: voiceId ?? this.voiceId,
    speechRate: speechRate ?? this.speechRate,
    pitch: pitch ?? this.pitch,
  );
}

class TTSVoice {
  final String id;
  final String name;
  final String language;
  final String gender;

  TTSVoice({
    required this.id,
    required this.name,
    required this.language,
    required this.gender,
  });
}